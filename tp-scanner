#!/bin/bash
########### test-pyramid-scanner ###########
unit_test_identifier='@Test\b\|@ParameterizedTest\|@RepeatedTest\|@TestFactory\|@TestTemplate'
integration_test_identifier='@Spring.*Test\|@Data.*Test\|@Rest.*Test\|@Web.*Test\|@JdbcTest\|@MicronautTest'
float_to_int() {
  echo "$1" | cut -d. -f1
}

calculate_percentage() {
  if [ "$2" -ne 0 ]; then
    echo "scale=3 ; ($1/$2)*100" | bc
  else
    echo 0.0
  fi
}

get_total_test_count() {
  grep -iR $unit_test_identifier | wc -l | bc
}

get_integration_test_count() {
  prevLine=""
  int_test_cnt=0
  for line in $(grep -iR $integration_test_identifier | cut "-d:" -f1); do
    if [ "$prevLine" != "$line" ]; then
      tmp=$(grep -c $unit_test_identifier "$line")
      int_test_cnt=$((int_test_cnt + tmp))
    fi
    prevLine=$line
  done
  echo $int_test_cnt
}

get_bdd_integration_test_count() {
  bdd_test_cnt=0
  for line in $(grep -iR --include=*.feature "Feature" | cut "-d:" -f1); do
    tmp=$(grep -c "Scenario" "$line")
    bdd_test_cnt=$((bdd_test_cnt + tmp))
  done
  echo $bdd_test_cnt
}

get_maven_modules_count() {
  grep -iR --include=pom.xml "<module>" | wc -l | bc
}

get_gradle_modules_count() {
  grep -iR --include=settings.gradle "include" | wc -l | bc
}

tp_for_maven_multi_module() {
  tput setaf 9
  echo "Maven Multi-module scan on " "$basePath"
  echo "   "
  tput setaf 7
  for line in $(grep -iR --include=pom.xml "<module>" | cut "-d:" -f2); do
    appName=$(echo "$line" | sed 's~<[^<>]*>\([^<>]*\)</[^<>]*>~\1~' | sed 's/ //g')
    cd "$appName"
    tp src
    cd "$basePath"
  done
}

tp_for_gradle_multi_module() {
  tput setaf 9
  echo "Gradle Multi-module scan on " "$basePath"
  echo "   "
  tput setaf 7
  for line in $(grep -iR --include=settings.gradle "include" | cut "-d " -f2); do
    appName=$(echo $line | sed "s/'/ /g")
    echo "$appName"
    cd "$appName"
    tp src
    cd "$basePath"
  done
}

tp_for_generic_single_module() {
  tput setaf 9
  echo "Single Module scan on " "$basePath"
  echo "   "
  tput setaf 7
  tp src
}

tp() {
  echo "*****************************************************************"
  if [ -d "$1" ]; then
    cd "$1"
    echo -n "Deriving Test Pyramid from path : "
    PWD
  else
    echo -n "Invalid path specified : "
    PWD
    exit
  fi
  #get total test count
  total_test_cnt=$(get_total_test_count)

  #get Integration test count
  int_test_cnt=$(get_integration_test_count)

  #get bdd Integration test count
  bdd_test_cnt=$(get_bdd_integration_test_count)

  #get total integration test count
  total_int_test_cnt=$((int_test_cnt + bdd_test_cnt))
  #get total test count (add bdd test count)
  total_test_cnt=$((total_test_cnt + bdd_test_cnt))
  #get Unit test count
  unit_test_cnt=$((total_test_cnt - total_int_test_cnt))

  #get unit and integration test percentage for display
  int_test_pct_disp=$(calculate_percentage $total_int_test_cnt $total_test_cnt)
  unit_test_pct_disp=$(calculate_percentage $unit_test_cnt $total_test_cnt)

  #print the results
  echo "======================================================="
  echo -n "Integration test count          : "
  echo $int_test_cnt
  echo -n "BDD Integration test count      : "
  echo $bdd_test_cnt
  echo -n "Total Integration test count    : "
  echo $total_int_test_cnt
  echo -n "Unit test count                 : "
  echo $unit_test_cnt
  echo -n "Total test count                : "
  echo $total_test_cnt
  echo "======================================================="
  echo -n "Integration test percentage     : "
  tput setaf 2
  echo "$int_test_pct_disp"
  tput setaf 7
  echo -n "Unit test percentage            : "
  tput setaf 2
  echo "$unit_test_pct_disp"
  tput setaf 7
  echo "======================================================="

  #get unit and integration test percentage for calculation - float to int conversion
  unit_test_pct=$(float_to_int "$unit_test_pct_disp")
  int_test_pct=$(float_to_int "$int_test_pct_disp")

  #print suggestions
  tput setaf 5
  echo "Suggestions (consider only if necessary):"
  if [ "$int_test_pct" -ge "$unit_test_pct" ]; then
    tput setaf 1
    echo " * test suite needs refactoring - add more unit tests and optionally decrease the integration tests"
  fi
  if [ "$int_test_pct" -le 5 ]; then
    tput setaf 1
    echo " * test suite needs refactoring - add more integration tests"
  fi
  if [ "$unit_test_pct" -le 75 ]; then
    tput setaf 1
    echo " * test suite needs refactoring - add more unit tests"
  fi
  if [ "$unit_test_pct" -le 0 ]; then
    tput setaf 1
    echo " * test suite needs refactoring - NO unit tests found"
  fi
  if [ "$int_test_pct" -le 0 ]; then
    tput setaf 1
    echo " * test suite needs refactoring - NO integration tests found"
  fi
  if [ "$int_test_pct" -le "$unit_test_pct" ]; then
    tput setaf 3
    echo " * compare the 'Integration test percentage' and 'Unit test percentage', and refactor the tests if needed"
  fi
  tput setaf 7
  echo "*****************************************************************"
  echo "  "
}

# not used
displayPyramid() {
  x=$1
  while [ "$x" -ge 1 ]; do
    tput setaf 5
    echo -n "="
    x=$(("$x" - 1))
  done
  echo ""
}

#Main
tput setaf 9
echo "*************************Test Pyramid - Scan started*************************"
start=$(date +%s)
tput setaf 7

if [ -z "$1" ]; then
  echo "Base path to scan not passed - using current path as default"
else
  cd $1
fi
basePath=$(PWD)

mavenCount=$(get_maven_modules_count)
gradleCount=$(get_gradle_modules_count)
if [ "$mavenCount" -gt 0 ]; then
  tp_for_maven_multi_module
elif [ "$gradleCount" -gt 0 ]; then
  tp_for_gradle_multi_module
else
  tp_for_generic_single_module
fi

tput setaf 9
end=$(date +%s)
echo "Elapsed time: $(($(((end - start) * 1000))))ms"
echo "*************************Test Pyramid - Scan ended  *************************"
tput setaf reset
########### test-pyramid-scanner ###########